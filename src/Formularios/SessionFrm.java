/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Formularios;

import DbContext.EmpleadosCtx;
import DbContext.RolesCtx;
import Entidades.Empleados;
import Fuentes.Tipografia;
import Formularios.AdministradorFrm;
import Formularios.DiganosticoFrm;
import java.util.List;
import Entidades.Rol;
import com.formdev.flatlaf.FlatLightLaf;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.mindrot.jbcrypt.BCrypt;


public class SessionFrm extends javax.swing.JFrame {

    /**
     * Creates new form SessionFrm
     */
    
    private final static String MECANICO = "MECANICO";
    private final static String ADMINISTRADOR = "ADMINISTRADOR";
    
    EmpleadosCtx empleadosCtx = new EmpleadosCtx();
    RolesCtx rolesCtx = new RolesCtx();
    
    public SessionFrm() {
        initComponents();
        
        Tipografia fuente = new Tipografia("Fuente.ttf", 14f);
        fuente.asignarFuente(this);
        
        initializeDefaultRolesAndRoot();
    }
    
    private void initializeDefaultRolesAndRoot() {
        crearPorDefectosRoles();
        crearPorDefectoAdministrador();
    }

    public void crearPorDefectoAdministrador() {
        try {
            if (existenAdministradores()) {
                crearAdministrador();
            }
        } catch (Exception e) {
            mostrarMensajeError(e);
        }
    }
    
    private boolean existenAdministradores() throws Exception {
        List<Empleados> employees = empleadosCtx.obtenerEmpleadosPorRolYEstado(ADMINISTRADOR);
        return employees.isEmpty();
    }

    private void crearAdministrador() throws Exception {
        Rol rol = rolesCtx.obtenerPorRol(ADMINISTRADOR);
        Empleados employee = new Empleados();

        employee.setId(UUID.randomUUID().toString());
        employee.setNombre("Root");
        employee.setDocumento("123456789");
        employee.setFkRolId(rol);
        employee.setContrasea(BCrypt.hashpw("1234*", BCrypt.gensalt()));
        employee.setEstaActivo(true);

        empleadosCtx.guardar(employee);
    }

    public void crearPorDefectosRoles() {
        try {
            if (existenRoles()) {
                Rol rol1 = createRole(MECANICO);
                Rol rol2 = createRole(ADMINISTRADOR);

                rolesCtx.guardar(rol1);
                rolesCtx.guardar(rol2);
            }
        } catch (Exception e) {
            mostrarMensajeError(e);
        }
    }

    private boolean existenRoles() throws Exception {
        List<Rol> roles = rolesCtx.obtenerTodosLosRoles();
        return roles.isEmpty();
    }

    public Rol createRole(String role) {
        Rol rol = new Rol();
        rol.setId(UUID.randomUUID().toString());
        rol.setRol(role);
        return rol;
    }
    
    private void validarCredenciales(String credential, String password) throws Exception {
        if (credential.isEmpty() || password.isEmpty()) {
            throw new Exception("Los campos deben estar rellenos.");
        }
    }

    private void verificarUsuario(Empleados user, String password) throws Exception {
        if (user == null) {
            throw new Exception("Credencial incorrecta.");
        }

        if (!BCrypt.checkpw(password, user.getContrasea())) {
            throw new Exception("Contraseña incorrecta.");
        }

        if (!user.getEstaActivo()) {
            throw new Exception("Algo salió mal. No tienes permitido entrar al sistema.");
        }
    }

    private void iniciarSesion(Empleados user) {
        if (MECANICO.equals(user.getFkRolId().getRol())) {
            DiganosticoFrm diagnostico = new DiganosticoFrm(user);
            diagnostico.setVisible(true);
            diagnostico.setLocationRelativeTo(null);
        } else if (ADMINISTRADOR.equals(user.getFkRolId().getRol())) {
            AdministradorFrm administrador = new AdministradorFrm();
            administrador.setVisible(true);
            administrador.setLocationRelativeTo(null);
        }
        this.dispose();
    }

    private void mostrarMensajeError(Exception e) {
        JOptionPane.showMessageDialog(rootPane, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        txt_credencial = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btn_entrar = new javax.swing.JButton();
        txt_password = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Geist Mono Light", 0, 12)); // NOI18N
        jLabel1.setText("INICIAR SECCIÓN");

        jLabel2.setFont(new java.awt.Font("Geist Mono Light", 0, 12)); // NOI18N
        jLabel2.setText("Credencial:");

        txt_credencial.setFont(new java.awt.Font("Geist Mono Light", 0, 12)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Geist Mono Light", 0, 12)); // NOI18N
        jLabel3.setText("Contraseña:");

        btn_entrar.setBackground(new java.awt.Color(0, 102, 0));
        btn_entrar.setFont(new java.awt.Font("Geist Mono Light", 0, 12)); // NOI18N
        btn_entrar.setForeground(new java.awt.Color(255, 255, 255));
        btn_entrar.setText("Entrar");
        btn_entrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_entrarActionPerformed(evt);
            }
        });

        txt_password.setFont(new java.awt.Font("Geist Mono Light", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(127, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_credencial)
                    .addComponent(btn_entrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_password)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_credencial, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel3)
                .addGap(9, 9, 9)
                .addComponent(txt_password, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(btn_entrar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_entrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_entrarActionPerformed
        try {
            String credencial = txt_credencial.getText();
            String password = new String(txt_password.getPassword());

            validarCredenciales(credencial, password);

            Empleados usuario = empleadosCtx.obtenerPorCredencial(credencial);
            verificarUsuario(usuario, password);

            iniciarSesion(usuario);

        } catch (Exception e) {
            mostrarMensajeError(e);
        }
    }//GEN-LAST:event_btn_entrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        try {
            UIManager.setLookAndFeel(new FlatLightLaf()); 
        } catch (UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SessionFrm form = new SessionFrm();
                form.setVisible(true);
                form.setResizable(false);
                form.setLocationRelativeTo(null);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_entrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txt_credencial;
    private javax.swing.JPasswordField txt_password;
    // End of variables declaration//GEN-END:variables
}
